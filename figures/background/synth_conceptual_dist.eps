%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.16 (Build 20D75) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 414 443
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 414 443
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HRJPVB+RobotoCondensed-Regular
%!FontType1-1.0: HRJPVB+RobotoCondensed-Regular 1.0000.2.1370
14 dict begin
/FontName /HRJPVB+RobotoCondensed-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /gid52 put
dup 34 /gid69 put
dup 35 /gid86 put
dup 36 /gid81 put
dup 37 /gid73 put
dup 38 /gid88 put
dup 39 /gid4 put
dup 40 /gid55 put
dup 41 /gid84 put
dup 42 /gid71 put
dup 43 /gid37 put
dup 44 /gid89 put
dup 45 /gid72 put
dup 46 /gid77 put
dup 47 /gid83 put
dup 48 /gid93 put
dup 49 /gid82 put
dup 50 /gid76 put
dup 51 /gid87 put
dup 52 /gid94 put
dup 53 /gid80 put
dup 54 /gid39 put
dup 55 /gid40 put
dup 56 /gid57 put
dup 57 /gid41 put
dup 58 /gid54 put
dup 59 /gid61 put
dup 60 /gid50 put
dup 61 /gid56 put
dup 62 /gid44 put
dup 63 /gid45 put
dup 64 /gid43 put
dup 65 /gid51 put
dup 66 /gid48 put
dup 67 /gid42 put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1509 1 index div -555 2 index div 2043 3 index div 2163 5 -1 roll div]cvx def
/sfnts [<

042E05C4001A0042B2031B1C11123900B0004558B00A2F1BB10A203E59B0004558B0032F1BB103143E59B00A10B11101B00A2B5821D81BF459B00310B11701B00A2B5821D81BF4593031010606232200111110003332161723262623220615111416203637042E0CEFDADBFEFE0109E5D3E70AB90C7E8195A095011E7E0F01CEEAF8014D011D0108011C014AFDEBB298E9E1FEF5DDEC8EB80002009D0000041105B0000900130048B2021415111239B00210B013D000B0004558B0012F1BB101203E59B0004558B0002F1BB100143E59B00110B10A01B00A2B5821D81BF459B00010B10B01B00A2B5821D81BF459303133112132001115100021031133323637113426239D015BFF011AFEE2FEF08F93C1B202B1B305B0FEC1FEDFF4FEDFFEC50512FB8BDDD90102E6D70001009D000003AC05B0000B005100B0004558B0062F1BB106203E59B0004558B0042F1BB104143E59B20B0406111239B00B2FB10001B00A2B5821D81BF459B00410B10201B00A2B5821D81BF459B00610B10801B00A2B5821D81BF45930310121112115211121152111210357FDFD0258FCF10305FDB2020302A1FDFC9D05B09EFE2C000001009D0000039305B00009005100B0004558B0042F1BB104203E59B0004558B0022F1BB102143E59B2090204111239B0092FB2FF09015DB2CF09015DB22F09015DB10001B00A2B5821D81BF459B00410B10601B00A2B5821D81BF4593031012111231121152111210340FE14B702F6FDC101EC0283FD7D05B09EFE0E000001007CFFEC042C05C4001F0058B20A202111123900B0004558B00A2F1BB10A203E59B0004558B0032F1BB103143E59B00A10B11101B00A2B5821D81BF459B00310B11801B00A2B5821D81BF459B21F0A03111239B01F2FB11C01B00A2B5821D81BF45930312507062122000311101233321617232626232206071114163332373711213521042C208AFEF6ECFEF303F5F4D0EB0CB70B81839D9203A89D944D1BFEF601C1B528A10139011E011E01320131E8D78899CDE1FED7DCEB481901509C000001009D0000045605B0000B0054B2010C0D11123900B0004558B0062F1BB106203E59B0004558B00A2F1BB10A203E59B0004558B0002F1BB100143E59B0004558B0042F1BB104143E59B2080600111239B0082FB10201B00A2B5821D81BF45930312123112111231133112111330456B8FDB6B7B7024AB802A1FD5F05B0FD8E0272000100A50000015C05B00003001D00B0004558B0022F1BB102203E59B0004558B0002F1BB100143E59303121231133015CB7B705B0000001009D0000039005B00005002900B0004558B0042F1BB104203E59B0004558B0022F1BB102143E59B10001B00A2B5821D81BF45930312521152111330155023BFD0DB89D9D05B00001009D0000045405B00009004CB2010A0B


7F6B5847FCEE0600000200880000015105C40003000D003FB2070E0F111239B00710B001D000B0004558B0022F1BB1021C3E59B0004558B0012F1BB101143E59B00210B007D0B0072FB10B05B00A2B5821D81BF459303121231133131406232226343632160143B1B10E32333232326433043A011F2D3C3C5A3E3F00000100920000014306000003001300B0022FB0004558B0002F1BB100143E593031212311330143B1B1060000000100850000057F044E001C0078B2041D1E11123900B0004558B0032F1BB1031C3E59B0004558B0072F1BB1071C3E59B0004558B0002F1BB1001C3E59B0004558B01A2F1BB11A143E59B0004558B0142F1BB114143E59B0004558B00B2F1BB10B143E59B201031A111239B2051A07111239B00710B10F01B00A2B5821D81BF459B017D030310117363332173633201311231134262322060711231126232207112311012B0463A2B54866B6012B07B05464506408B203B48637B0043A64789D9DFE8BFD2702C876737C60FD2B02D0E186FCD5043A00000100840000035A044E00110054B20B121311123900B0004558B0032F1BB1031C3E59B0004558B0002F1BB1001C3E59B0004558B0062F1BB106143E59B0004558B00F2F1BB10F143E59B2010306111239B00310B10B01B00A2B5821D81BF4593031011736332013112311342623220607112311012B0567A0011F04B05555426920B1043A7589FE81FD3102C77F6B5847FCEE043A000002005FFFEC03A4044E000C00190045B2091A1B111239B00910B010D000B0004558B0022F1BB1021C3E59B0004558B0092F1BB109143E59B11001B00A2B5821D81BF459B00210B11601B00A2B5821D81BF459303113341220121715140223220227371416333213353426232206155FE50178E503E4BEBCE304B1836FEA07846F6D83024FEC0113FEF4E772EBFEEE010AE310A7BF01527AA6C1C1A500020085FE600392044E000F001B0070B2181C1D111239B01810B00CD000B0004558B00C2F1BB10C1C3E59B0004558B0092F1BB1091C3E59B0004558B0062F1BB106163E59B0004558B0032F1BB103143E59B2050C03111239B20A0C03111239B00C10B11301B00A2B5821D81BF459B00310B11801B00A2B5821D81BF4593031011006232227112311331736333216170734262322071116333236370392B9A9A358B0A00959A6B2B003B0707C7F42418278710101E9FEFFFC7BFDF905DA788CF8F711B6AD7FFDCD7CADB2000001008400000243044E000D0047B2040E0F11123900B0004558B00B2F1BB10B1C3E59B0004558B0082F1BB1081C3E59B0004558B0052F1BB105143E59B00B10B1020FB00A2B5821D81BF459B2090B05111239303101262322071123113317363332170243252B8836B1AC0347822A1C03940795FCFA043A6E820E0000010063FFEC0343


00>] def
/CharStrings 36 dict dup begin
/.notdef 0 def
/gid4 1 def
/gid37 2 def
/gid39 3 def
/gid40 4 def
/gid41 5 def
/gid42 6 def
/gid43 7 def
/gid44 8 def
/gid45 9 def
/gid48 10 def
/gid50 11 def
/gid51 12 def
/gid52 13 def
/gid54 14 def
/gid55 15 def
/gid56 16 def
/gid57 17 def
/gid61 18 def
/gid69 19 def
/gid71 20 def
/gid72 21 def
/gid73 22 def
/gid76 23 def
/gid77 24 def
/gid80 25 def
/gid81 26 def
/gid82 27 def
/gid83 28 def
/gid84 29 def
/gid86 30 def
/gid87 31 def
/gid88 32 def
/gid89 33 def
/gid93 34 def
/gid94 35 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] readonly def
/FontBBox {-1509 -555 2043 2163} readonly def
/UniqueID 4427544 def
currentdict end
currentfile eexec


C8BC44F6131FB764174AFA593F66B264CDD751691B6E02C6BAAD2CA2A191404F8DC665A25023127712AB35E8338166157BDA48C2A0DA366B2D4149233822294EA0FF1D6E41BED364021172F9EBEDE7381164A90CFB8B508DA7B21BA26D778BD483E9AFA1A57316A34A7171B60C5ED3E07C2BE8B93674AB9A0100F62BA631D789F89DD8DC8C0473439C8FC96B7F661DAFB9831CDBC2A9F5ACA39A2A3EE7598D203D140718FA1D8D8E50F5B582F2BD5DBC8AD7D730F4B7CF979F2A883306B4B9D0D8654E779865A2467F3CAA37868599360C2FA42D10B1E3DE91EC510C3C8E5F2C104092141512F804733C53483126281032594B2CABB183B4DA010A23108E26EEF5372FF51ADE27C980F10D114EAD2C79D58754C085C6D8367E90ADA3E89FF6942C9B51DED5B1FD138060B0550BA611C1470D6BC574E779B2B376A774A03409BBE48B835C87A70E64B60AAB301A0AC27A08D89B8A65943D038CCEF920E4ED3CBAE6153515598536DAC3CB49733939C9B2A2EBA371FBCC401D3DAC10C97C89DE0309C38F17A107D23599D8A80F127B396AFD45F649FA8CB27DE0054629C66AF1FFFF1221F2F95B79E4AC759E2106450D1FF11027EFF470E19A7B9B2AC09054BE32527033F1D306A3CDA35E075BB516CE09CE59CB8AD081A46611BCA5FABC72A51EDABE190A2583DF07313B757877B16507631AD09B768940BF79B7F68445219280D142EF0DB2B36622F0ED484E5B9FB44FE22B8024AE3F39140F72E03C00484F8DC9FF56D15F8A93FBD0B88A73F16266E8775A9E69271B3982628C63AB2DCE4FE9ABF5DD7A958F5E6C428673C8CFD82BE17CC6F23EAFAA8B9399583206C0E46FD3269D8DE63AE780621ED8243197C0C379AA6179B320387AED3D53189A9176F07DACE67F9BB17B3E3011B56CD56CF15418C56C9AEB3B33A03524337129377CE92836EA4CFBEC0FB202F000732CB7F8B128BE2F21812208DDCCF4FE0AD680A92E4A275C64C2376E92B96C32B2BD390B179BF560B45D3CA2036CAD8E3F7A6A26CEAAEB7CDA39A3DD626DE80003704A5CD56B6125CCC80C174778BA4629F567760BB9AD9AAF198759A20C372E03FBD07EA9184666CDDF5C645F35B3C19D116E37DE2DEC119F6FA7412392F0E885C2FAC9FD65EC828C7AF9C50F6263364B94B9119D462CE9DF7DFB4D07AFCC88DA460C82B1E4B078DDAA0355E71D1BE4A160C797321EF496E745971F92569BC7D559821BCB18ECE655A5B8A9FDB74BA549D075131608187592D88AE3D6F2AA8D377613063DA07CCDC5E09BF184D127E3B29889CB0F2153476856E092715028AB66BF667649B43BD7EB0CA47AD865867A4A9D8DF5C7DCF431CE8233C5B8C7E794B7F119B85F2CAFA0934D5986BA65A93D0E8DD454B6C78626062C32E22F3CB90B2837D57BF566546A38407B4F5060632F9BCF1583D958
54FC700677072736D4255490BB31A1BA09406E08EF6E41EAFAAD9AAFA55B82D113619647E4791CA9BE961D8FA926D27C73339686D84590951F072129FDE2A505831C0E7A117ED546DA4A0E922243BF9F6B446EEB0C5310E4395CB3324FF9705DD56BF0375241432BBF960A1CF1D8FF88FF48B95377B66DF49172D03F6F1A0B68AE300E6EA61644C38F21E5729F864FA4863F3B4A805204B2148216A0DEBBFB3B5E0201577EE69216F374E94D8DF6BB9A11256EE3A5800C3B4484E9E88B61482D481F79D9BCD21393FB2E3D4A1B9C404163EE19E038E92FC8BA3215E3C1C37F33B6930FCA0C8B6EFF64CC5F92A89FE9C5866E9CC3B01BEB34AED26F65A9F6868225E857619DBF25FE7672EC06FAFD15594B3A92E4CEDF1662C2D17A7D750683B763D567F9E43CA1D05F9E455CE982F44720C8FE9178ECD20E42E4058C8F1A7A70F74E2D7344EAE561655A42FDCEEB4B89466BFBB47646C0324E7A2A9D5D3D73731FF3D89F5AB05DA5C64679BE1ED510A38B1DF7D2DD3FF871926A963C345802477FE675559F1547E417F6C201ACB870837C0F422903F93A1DDB508A769683A90ACF4AA70523FDA4D9107811D468E9C403D931B20B4D57A37841DDF6263FAA4F06FB181EA98F67F376B8730B22D4207709D45AFA249DCC1199A863277A0FB4DFBB71AA84202E9E4D7E89F3A18729B5034FD7FFB90F4B60C52920BEE68EB985CA633A7C7D374F92EE09204EE37C613DB1092F379DED97AC111342B0C46B00E228209F5B82AF5FA0341EDE54C76C1DA1D8514D4094359140D7682FFBEB3ECB53C4013BD1E1B804631799711B4B2DA4BEB365F77C3A9F2F80C7FF608F1FF13943ECBEBA715B1627040456456B2FB55456D55A097DDB945BC0CCAB2890254F43E7C4711B3A9EAB8C19C5683BBEAA5B367855D7F74A4F293A97153DD13BFEE834F3C53FBEA97A3346BBE7EE38F6E5A1A7161038A10AF956FFC44F78750AC4CC8C9FF995B00409A8C2128D770DF0BE7EF5A27C1607B543151607BBAFFEE34C8B33B07A525CBE8DB69C3A7713C478915A040E39D40113B05267D7DCF535F280DD23DB147A3C2D7249EE2866BDDE63A74DC281333F568EEBC529BA49A620B21648582B19496DE0FE0C51C62424E938C72E82E284A3B092155997A01E43C74E7C6D9E827FBBABEEA8D79ABFBFC624FAE8F33B7545173D578B180BD98DDEB7F4BE8E743A963954085EB849CBA3BE702ADAA5E052E18FFAFB3D9A2CB8FEB5F6F3C0AC49EEF9974D5B160136AB3699A8340C04B64DF3C41C2BC997C312F16E763ACB841B2A06A33B534DA71A47D087A9F959EE5E3CE7AD0E72E9F52C2500BB62BEC8B76252AD54336BB693D648B09747158406CC31D4CB763C61BD0DDDCD90D6E35AA9A2E8846E8489321B638B30201D9EC484FD1F96D0444CB495C999930797DC5CA9CA5AEA40
F0B1758F68F582539BDA6382891CF65E20071438DBCF632CD8AC870816BCF5B96E0D21334000C4FF3227B484626DA1CE575F9DA98ED30EF6BE2F59927AA28CDE6A31D1B86FB1E9438FBED854D61A1DAFDB7279C2BB516F6D43519F61BB089E6AAD77729C6C911BC63E9648DAE59846C21F110438E32D66575C81EDE9272CFCD9A150F1F96C7D0FA4CADD32F6F25EF1BDDF96F5A32F0407FA6D625A51CC77CDEAA8211BAD94E45A236008444E5AB7E6264F25628006A8807C9043DFCABB3E73D399CC3772816E118D761E4B5DA7291F091D9623A476DBDF1C1BF015BB1D12661336692CFF125A46B331991D2EDA9540AB300BF33EC51D75F0BD3941C6022F53E191518232B88EA4E30B78DB9B2437811BDA9A200B6813AFD50CAC5680F63C29E0F98CB6EA84D6ADCA7AD70643449B93250D92F3ABE8CFE65DD404D7C97C67AA8997ABBB78971D64DC3BE66A9D075DD74BEFF5785B0DFD927D56928AEEA18E400FD96345A4F39C04D0D8A3CD30E9985C0387DC42741C770307285477AACEC38D2260BFA7EB32F600BF66B947576D7E619B3296A1524ECFC91F1198A17463249A7D1361E75483E1579AF3B3F3B44297ECB8DDFC8AFBF486EAC1E8DDD065426F64EE71B0A23A30EE54208FE42528F8AF46D02159D2F32B3C06B9F389D1728EE8209C4258C526C314C2A697E6E07E12BA8DF634A932E2E88DB8E12C2F44CA35553769836A5F09155EBD11D5AE3F6B3D978B0D18AAFCAABA0FB3CFD68ABA62DF47682FB93291C2B66A763B66E5340DE91F1FC0633E33B76C550E757BD50401B52FD26A94BA5CAE5C2E4C8F93F09F7E83B7F132EF91511658E606B9B04F084C84C76213E76D875A8C572555DF118D57AABD0BB26E2384232975CA67077644F430ECEBB89A6D46423D26F4AC37072634F06C561F0984903E9BDF7F9F7914A52289FAA9FEC54AD2BB8F6F9ABCC53B360F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/HRJPVB+RobotoCondensed-Regular cguidfix
/F1.1/HRJPVB+RobotoCondensed-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
4 w
0.60000002 i
/Cs1 SC
0 0 0 sc
q
189 89.695656 m
214 89.695656 l
160.5 50 l
107 89.695656 l
129 89.695656 l
129 127.94782 l
129 176.30435 l
104 176.30435 l
157.5 216 l
211 176.30435 l
189 176.30435 l
189 127.94782 l
189 89.695656 l
h
W*
0 0 414 443 rc
0 -1 -1 0 214 216 cm
126.30434 25 m
126.30434 0 l
166 53.5 l
126.30434 107 l
126.30434 85 l
88.052177 85 l
39.695652 85 l
39.695652 110 l
0 56.5 l
39.695652 3 l
39.695652 25 l
88.052177 25 l
126.30434 25 l
h
S
Q
q
0 0 414 443 rc
1 0 0 -1 82 254 cm
/F1.1[ 20 0 0 -20 0 0]sf
9.4560547 19 m
(!"#"$%&%#'\(\)"*%)[ 11.083984 9.580078 6.083984 9.580078 15.048828 9.365234 5.908203 9.365234 6.083984 4.580078 10.361328 9.863281 9.580078 9.238281 0.000000 ] xS
1 0 0 -1 9 63 cm
18.133789 19 m
(+,-./)[ 11.523438 9.667969 9.921875 4.580078 0.000000 ] xS
1 0 0 -1 16 447 cm
31.389648 19 m
(\(01&2%3.4%#)[ 10.361328 8.330078 9.677734 5.908203 9.658203 9.365234 9.111328 4.580078 8.779297 9.365234 0.000000 ] xS
1 0 0 -1 75 31 cm
16.137695 19 m
(!%#*%\)&,"5'\(\)"*%)[ 11.083984 9.365234 6.083984 9.238281 9.365234 9.863281 5.908203 9.667969 9.580078 4.580078 4.580078 10.361328 9.863281 9.580078 9.238281 0.000000 ] xS
1 0 0 -1 280 159 cm
16.871094 19 m
(6/1*%\)&,"5)[ 11.337891 10.039062 9.677734 9.238281 9.365234 9.863281 5.908203 9.667969 9.580078 0.000000 ] xS
27.061523 43 m
(7.3&"1*%)[ 11.416016 4.580078 9.111328 5.908203 9.580078 9.677734 9.238281 0.000000 ] xS
1 0 0 -1 138 147 cm
0.43066406 19 m
(8\(9:)[ 11.230469 10.361328 9.931641 0.000000 ] xS
2 w
2 J
[
5
5
] 0 d
1 0 0 -1 47 77.5 cm
0 1 m
358 1 l
S
1 0 0 -1 47 194.5 cm
0 1 m
356 1 l
S
1 0 0 -1 58 344 cm
0 1.5 m
346 1.5 l
S
Q
6 w
q
47 264 367 158 rc
1 0 0 -1 47 422 cm
0 0 m
367 0 l
367 158 l
0 158 l
0 0 l
h
S
Q
q
0 0 414 443 rc
1 0 0 -1 283 410 cm
/F1.1[ 20 0 0 -20 0 0]sf
0.15039062 19 m
(\(;<=>9\(?\()[ 10.361328 10.488281 12.382812 10.410156 12.402344 9.931641 10.361328 5.000000 0.000000 ] xS
15.277344 43 m
(9<@?<9)[ 9.931641 12.382812 11.816406 5.000000 12.382812 0.000000 ] xS
1 0 0 -1 284 325 cm
6.3642578 19 m
(6A<=:AB)[ 11.337891 12.011719 12.382812 10.410156 10.615234 12.011719 0.000000 ] xS
0.12890625 43 m
(?<=9:C+69)[ 5.000000 12.382812 10.410156 9.931641 10.615234 9.609375 11.523438 11.337891 0.000000 ] xS
Q
q
83 273 167 62 rc
1 0 0 -1 83 335 cm
0 0 m
167 0 l
167 62 l
0 62 l
0 0 l
h
S
Q
q
237.4117 310.17648 m
236.35287 310.17648 l
236.35287 323.94116 l
236.35287 324.52594 235.87883 325 235.29405 325 c
234.70929 325 234.23523 324.52594 234.23523 323.94116 c
234.23523 310.17648 l
233.17641 310.17648 l
231.42212 310.17648 230 308.75433 230 307.00006 c
230 305.24579 231.42212 303.82367 233.17641 303.82367 c
234.23523 303.82367 l
234.23523 290.05884 l
234.23523 289.47406 234.70929 289 235.29405 289 c
235.87883 289 236.35287 289.47406 236.35287 290.05884 c
236.35287 303.82352 l
237.4117 303.82352 l
237.4117 303.82367 l
239.16599 303.82367 240.5881 305.24579 240.5881 307.00006 c
240.5881 308.75433 239.16599 310.17648 237.4117 310.17648 c
h
237.4117 305.94116 m
233.17641 305.94116 l
232.7981 305.94116 232.44853 306.14301 232.25938 306.47061 c
232.07024 306.79825 232.07024 307.20187 232.25938 307.52951 c
232.44853 307.85712 232.7981 308.05896 233.17641 308.05896 c
237.4117 308.05884 l
237.99648 308.05884 238.47052 307.58478 238.47052 307 c
238.47052 306.41522 237.99648 305.94116 237.4117 305.94116 c
h
W
0 0 414 443 rc
225 330 m
245.5881 330 l
245.5881 284 l
225 284 l
h
f
Q
q
219.4117 310.17648 m
218.35287 310.17648 l
218.35287 323.94116 l
218.35287 324.52594 217.87883 325 217.29405 325 c
216.70929 325 216.23523 324.52594 216.23523 323.94116 c
216.23523 310.17648 l
215.17641 310.17648 l
213.42212 310.17648 212 308.75433 212 307.00006 c
212 305.24579 213.42212 303.82367 215.17641 303.82367 c
216.23523 303.82367 l
216.23523 290.05884 l
216.23523 289.47406 216.70929 289 217.29405 289 c
217.87883 289 218.35287 289.47406 218.35287 290.05884 c
218.35287 303.82352 l
219.4117 303.82352 l
219.4117 303.82367 l
221.16599 303.82367 222.5881 305.24579 222.5881 307.00006 c
222.5881 308.75433 221.16599 310.17648 219.4117 310.17648 c
h
219.4117 305.94116 m
215.17641 305.94116 l
214.7981 305.94116 214.44853 306.14301 214.25938 306.47061 c
214.07024 306.79825 214.07024 307.20187 214.25938 307.52951 c
214.44853 307.85712 214.7981 308.05896 215.17641 308.05896 c
219.4117 308.05884 l
219.99648 308.05884 220.47052 307.58478 220.47052 307 c
220.47052 306.41522 219.99648 305.94116 219.4117 305.94116 c
h
W
0 0 414 443 rc
207 330 m
227.5881 330 l
227.5881 284 l
207 284 l
h
f
Q
q
192.18784 317.20795 m
191.29106 315.50186 191.20842 313.48309 191.96274 311.70938 c
192.71706 309.9357 194.22847 308.59485 196.07942 308.05728 c
195.77765 307.20157 195.41916 306.36691 195.00632 305.5589 c
194.59552 304.74982 194.13025 303.96957 193.61371 303.22354 c
190.95876 305.19656 187.24234 304.84515 185.00427 302.40945 c
182.7662 299.97375 182.72975 296.24094 184.91985 293.76202 c
187.10992 291.28308 190.81877 290.85916 193.51173 292.77997 c
196.20471 294.70078 197.01152 298.34552 195.3808 301.22342 c
196.84506 303.22241 197.97728 305.44452 198.73381 307.80411 c
201.81433 308.16452 204.21078 310.65161 204.45671 313.74338 c
204.70262 316.83511 202.72945 319.66977 199.74466 320.51263 c
196.75986 321.3555 193.59544 319.97168 192.18784 317.20795 c
h
193.19165 296.27057 m
192.47556 294.86505 190.98331 294.02933 189.41075 294.15308 c
187.8382 294.27682 186.49503 295.33566 186.00758 296.83588 c
185.52013 298.33609 185.98439 299.98221 187.18388 301.00665 c
188.38336 302.0311 190.08185 302.23209 191.48734 301.51593 c
191.65321 301.42532 191.81223 301.32266 191.96304 301.20871 c
191.66318 300.90302 191.34682 300.61395 191.01535 300.34286 c
190.60776 300.00638 190.16833 299.71042 189.70329 299.45923 c
189.55167 299.37939 189.43858 299.32874 189.37137 299.30066 c
189.30588 299.27454 l
189.30083 299.27264 l
189.30174 299.2699 l
188.62418 299.04199 188.25826 298.3093 188.48312 297.63074 c
188.70799 296.95215 189.43904 296.58298 190.11861 296.80481 c
191.3784 297.31216 192.51877 298.07623 193.46716 299.04834 c
193.7233 298.1203 193.62511 297.13019 193.19165 296.27057 c
h
201.45412 312.48654 m
201.01338 311.63058 200.27007 310.96912 199.36871 310.63077 c
199.59772 311.96951 199.54552 313.34128 199.21542 314.65872 c
198.99484 315.33807 198.26697 315.7117 197.58641 315.49487 c
196.90585 315.27808 196.52821 314.55225 196.74126 313.87051 c
196.73828 313.86954 l
196.74573 313.84189 l
196.95592 312.76376 196.95258 311.65488 196.73586 310.57806 c
196.55537 310.63309 196.37918 310.70129 196.20866 310.78207 c
194.28949 311.75989 193.52638 314.10837 194.5042 316.02753 c
195.48201 317.94672 197.83049 318.70981 199.74965 317.73199 c
201.66882 316.75418 202.43193 314.40573 201.45412 312.48654 c
h
W
0 0 414 443 rc
174.27501 293.06665 m
192.95337 329.72498 l
213.4473 319.28281 l
194.76894 282.62448 l
h
f
Q
q
109.50008 323 m
104.25338 323.00003 100.00005 318.7468 100 313.50009 c
99.999954 308.25339 104.25321 304.00003 109.49992 304 c
114.74662 303.99997 118.99995 308.2532 119 313.49991 c
118.99974 318.74649 114.74666 322.99963 109.50008 323 c
h
114.29816 308.70184 m
112.24537 306.64969 109.11462 306.13049 106.50929 307.41016 c
103.90395 308.68979 102.40105 311.48483 102.77026 314.36389 c
103.13946 317.24295 105.29901 319.56833 108.14293 320.14917 c
108.14293 313.49991 l
108.14293 312.7504 108.75055 312.14276 109.50008 312.14276 c
110.24962 312.14276 110.85724 312.7504 110.85724 313.49991 c
110.85724 320.14917 l
113.30457 319.64957 115.27959 317.84589 115.99862 315.4538 c
116.71764 313.06171 116.06443 310.46802 114.29816 308.70184 c
h
W
0 0 414 443 rc
95 328 m
124 328 l
124 299 l
95 299 l
h
f
Q
q
111.7 295 m
107.3 295 l
105.4775 294.99991 104.00009 293.48892 104 291.625 c
104 289.375 l
104.00014 287.51111 105.47754 286.00021 107.3 286.00012 c
111.7 286 l
111.7 286.00012 l
113.52242 286.00027 114.99973 287.51117 114.99987 289.375 c
115 291.625 l
114.99982 293.48889 113.52246 294.99982 111.7 295 c
h
113 289.24997 m
112.99857 288.56027 112.47708 288.00153 111.83336 288 c
107.16679 288 l
106.52301 288.00146 106.00146 288.56021 106 289.24997 c
106.00014 291.74988 l
106.00142 292.43967 106.52297 292.99854 107.16679 293 c
111.83336 292.99985 l
112.47712 292.99841 112.99866 292.43964 113 291.74988 c
113 289.24997 l
h
W
0 0 414 443 rc
99 300 m
120 300 l
120 281 l
99 281 l
h
f
Q
q
167.6646 322.03851 m
162.94891 324.33856 157.26154 322.38028 154.96149 317.66461 c
152.66145 312.94891 154.61972 307.26154 159.3354 304.96149 c
164.05109 302.66144 169.73846 304.61972 172.03851 309.33539 c
174.33823 314.05112 172.38004 319.73825 167.6646 322.03851 c
h
165.70918 307.08405 m
162.96454 306.1395 159.92305 307.04529 158.14235 309.33752 c
156.36165 311.62976 156.23611 314.80078 157.83005 317.22659 c
159.42398 319.6524 162.38435 320.79578 165.19508 320.07114 c
162.28023 314.09482 l
161.95166 313.42114 162.23141 312.60867 162.90511 312.28009 c
163.57878 311.95151 164.39127 312.23126 164.71983 312.90497 c
167.63469 318.88126 l
169.61531 317.35938 170.59976 314.87244 170.1974 312.40726 c
169.79504 309.94205 168.07094 307.89722 165.70918 307.08405 c
h
W
0 0 414 443 rc
156.82387 332.88889 m
182.8889 320.17612 l
170.17613 294.11111 l
144.1111 306.82388 l
h
f
Q
q
165.7 295 m
161.3 295 l
159.47749 294.99991 158.00009 293.48892 158 291.625 c
158 289.375 l
158.00015 287.51111 159.47754 286.00021 161.3 286.00012 c
165.7 286 l
165.7 286.00012 l
167.52242 286.00027 168.99974 287.51117 168.99986 289.375 c
169 291.625 l
168.99982 293.48889 167.52246 294.99982 165.7 295 c
h
167 289.24997 m
166.99857 288.56027 166.47708 288.00153 165.83336 288 c
161.16678 288 l
160.52301 288.00146 160.00145 288.56021 160 289.24997 c
160.00014 291.74988 l
160.00142 292.43967 160.52296 292.99854 161.16678 293 c
165.83336 292.99985 l
166.47713 292.99841 166.99866 292.43964 167 291.74988 c
167 289.24997 l
h
W
0 0 414 443 rc
153 300 m
174 300 l
174 281 l
153 281 l
h
f
Q
q
131.05109 321.28198 m
126.75321 318.27264 125.70866 312.34897 128.718 308.05109 c
131.72736 303.7532 137.65103 302.70865 141.94891 305.71802 c
146.24678 308.72736 147.29134 314.65103 144.282 318.94891 c
141.27246 323.24649 135.34904 324.29102 131.05109 321.28198 c
h
143.18254 312.32169 m
142.67804 309.46323 140.41129 307.24222 137.54315 306.79608 c
134.67502 306.34995 131.84073 307.7775 130.49181 310.34763 c
129.14288 312.91779 129.57809 316.06131 131.57454 318.1683 c
135.3884 312.72156 l
135.81831 312.10757 136.66457 311.95834 137.27855 312.38828 c
137.89253 312.81818 138.04175 313.66443 137.61183 314.27841 c
133.79797 319.72516 l
136.08928 320.71964 138.74167 320.37497 140.70271 318.82791 c
142.66374 317.28085 143.61635 314.78152 143.18254 312.32169 c
h
W
0 0 414 443 rc
116.30544 317.06085 m
140.06085 333.69455 l
156.69456 309.93915 l
132.93915 293.30545 l
h
f
Q
q
138.7 295 m
134.3 295 l
132.47749 294.99991 131.00009 293.48892 131 291.625 c
131 289.375 l
131.00015 287.51111 132.47754 286.00021 134.3 286.00012 c
138.7 286 l
138.7 286.00012 l
140.52242 286.00027 141.99974 287.51117 141.99986 289.375 c
142 291.625 l
141.99982 293.48889 140.52246 294.99982 138.7 295 c
h
140 289.24997 m
139.99857 288.56027 139.47708 288.00153 138.83336 288 c
134.16678 288 l
133.52301 288.00146 133.00145 288.56021 133 289.24997 c
133.00014 291.74988 l
133.00142 292.43967 133.52296 292.99854 134.16678 293 c
138.83336 292.99985 l
139.47713 292.99841 139.99866 292.43964 140 291.74988 c
140 289.24997 l
h
W
0 0 414 443 rc
126 300 m
147 300 l
147 281 l
126 281 l
h
f
Q
q
82 350 167 60 rc
1 0 0 -1 82 410 cm
0 0 m
167 0 l
167 60 l
0 60 l
0 0 l
h
S
Q
2 w
q
0 0 414 443 rc
1 0 0 -1 101 398 cm
0 17.419348 m
1.9650426 5.8064489 6.5335269 0 13.705452 0 c
20.877378 0 25.510675 5.8064489 27.605343 17.419348 c
29.402592 28.473116 33.98996 34 41.367443 34 c
48.74493 34 53.289112 28.473116 55 17.419348 c
S
1 0 0 -1 167 398 cm
0 17.419348 m
1.9650426 5.8064489 6.5335269 0 13.705452 0 c
20.877378 0 25.510675 5.8064489 27.605343 17.419348 c
29.402592 28.473116 33.98996 34 41.367443 34 c
48.74493 34 53.289112 28.473116 55 17.419348 c
S
2 J
[
3
3
] 0 d
1 0 0 -1 1 396.2832 cm
46 0.10811801 m
15.333333 -1.698351 0 19.132462 0 62.600559 c
0 100.15544 0 312.69641 0 336.0759 c
0 364.79605 13.194014 379.14523 39.582039 379.12347 c
S
Q
0.06666667 0.06666667 0.06666667 sc
q
54.446808 31 m
43.428253 22.518425 l
33 22.518425 l
33 11.603908 l
43.270241 11.603908 l
54.446808 3 l
54.446808 31 l
h
W
0 0 414 443 rc
28 36 m
59.446808 36 l
59.446808 -2 l
28 -2 l
h
f
Q
4.5 w
1 j
q
0 0 414 443 rc
1 0 0 -1 33 31 cm
21.446808 0 m
10.428253 8.4815741 l
0 8.4815741 l
0 19.396091 l
10.270239 19.396091 l
21.446808 28 l
21.446808 0 l
h
S
1 J
0 j
1 0 0 -1 60.702129 31 cm
0 7.835391 m
2.7520635 11.578048 2.7520635 16.421951 0 20.16461 c
4.5826802 3.7448559 m
9.618288 9.8428402 9.618288 18.15716 4.5826802 24.255144 c
8.7780924 0 m
16.137798 8.1773663 16.137798 19.822634 8.7780924 28 c
S
2 w
2 J
0 0 0 sc
1 0 0 -1 276 189 cm
1.5 0.5 m
1.5 108.5 l
S
1.5 0.5 m
1.5 108.5 l
4.5 0.5 m
-1.5 0.5 l
4.5 108.5 m
-1.5 108.5 l
S
ep
end
