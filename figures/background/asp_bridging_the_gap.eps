%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.16 (Build 20D75) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 490 508
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 490 508
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HWCRWQ+RobotoCondensed-Regular
%!FontType1-1.0: HWCRWQ+RobotoCondensed-Regular 1.0000.2.1370
14 dict begin
/FontName /HWCRWQ+RobotoCondensed-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /gid52 put
dup 34 /gid69 put
dup 35 /gid86 put
dup 36 /gid81 put
dup 37 /gid73 put
dup 38 /gid88 put
dup 39 /gid4 put
dup 40 /gid55 put
dup 41 /gid84 put
dup 42 /gid71 put
dup 43 /gid93 put
dup 44 /gid82 put
dup 45 /gid76 put
dup 46 /gid87 put
dup 47 /gid77 put
dup 48 /gid94 put
dup 49 /gid37 put
dup 50 /gid89 put
dup 51 /gid83 put
dup 52 /gid75 put
dup 53 /gid80 put
dup 54 /gid17 put
dup 55 /gid39 put
dup 56 /gid40 put
dup 57 /gid61 put
dup 58 /gid50 put
dup 59 /gid56 put
dup 60 /gid44 put
dup 61 /gid41 put
dup 62 /gid45 put
dup 63 /gid43 put
dup 64 /gid51 put
dup 65 /gid54 put
dup 66 /gid48 put
dup 67 /gid42 put
dup 68 /gid57 put
dup 69 /gid58 put
dup 70 /gid49 put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1509 1 index div -555 2 index div 2043 3 index div 2163 5 -1 roll div]cvx def
/sfnts [<






072F1BB1071C3E59B0004558B0022F1BB102143E59B10001B00A2B5821D81BF459B2040002111239B00710B10501B00A2B5821D81BF459B20905071112393031252115213501213521150128020AFD2C01F0FE1402BC979788031999830000000001000000022312D37E86185F0F3CF50019080000000000C4F0112E00000000D5015316FA1BFDD507FB087300000009000200000000000000010000076CFE0C00000835FA1BFE4A07FB0001000000000000000000000000000000270323006801D5000001FC002F049C002B0489007C0491009D03F9009D03D8009D04BA007C04F6009D020000A503CD009D060B009D04F4009D04CE007D046F009D043F009D04250055042A003C047E0082047B002A0432001E03D5007203B2006003BF006303F1006103DD008401D5008801D500920605008503DF00840404005F03F20085026F008403A50063025D001703DE0081035500230383005E0000005F005F007600BC010B0154019601D502360277029202B603040340039603E1043B049D04C805060536056605E20633069B0718075D079707AD0818086308B10917095509C00A140A5B0A9E0AD7000100000027008F001600520005000100000000000E00000200029800060001B00C2BB0002B00B20112022B01B21301022B01B7133A30251B1000082B00B701483B2E211400082BB702584838281400082BB703524334261600082BB7045E4D3C2B1900082BB705362C22190F00082BB706715D46321B00082BB70791775C3A2300082BB7087E6750391A00082BB709544536261700082BB70A76604B361D00082BB70B83644E3A2300082BB70CD9B28A633C00082BB70D14110D090600082BB70E3C32271C1100082BB70F44392E211400082BB7104F4131211400082BB711574739281800082BB7126F5B47331F00082B00B2140B072BB00020457D691844B220180173B280180173B2B0180173B250180174B280180174B210180175B240180175B270180175B23F1C0173B25F1C0173B27F1C0173B22F1C0174B24F1C0174B26F1C0174B28F1C0174B2AF1C0174B2FF1C0174B21F1C0175B23F1C0175B25F1C0175B27F1C0175B20F200173B27F200173B2EF200173B21F200174B25F200174B28F200174B2CF200174B2FF200174B23F200175B26F200175B22F220173B26F220173B22F280173B23F28017300
00>] def
/CharStrings 39 dict dup begin
/.notdef 0 def
/gid4 1 def
/gid17 2 def
/gid37 3 def
/gid39 4 def
/gid40 5 def
/gid41 6 def
/gid42 7 def
/gid43 8 def
/gid44 9 def
/gid45 10 def
/gid48 11 def
/gid49 12 def
/gid50 13 def
/gid51 14 def
/gid52 15 def
/gid54 16 def
/gid55 17 def
/gid56 18 def
/gid57 19 def
/gid58 20 def
/gid61 21 def
/gid69 22 def
/gid71 23 def
/gid73 24 def
/gid75 25 def
/gid76 26 def
/gid77 27 def
/gid80 28 def
/gid81 29 def
/gid82 30 def
/gid83 31 def
/gid84 32 def
/gid86 33 def
/gid87 34 def
/gid88 35 def
/gid89 36 def
/gid93 37 def
/gid94 38 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] readonly def
/FontBBox {-1509 -555 2043 2163} readonly def
/UniqueID 4427544 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB2803DAE628F29CF7415E6BB758A966C8CE165C4DA455AF6C4251FBCD2ADCADD7621420C834AEC6E0B4500CADB3E7CFBE54863D7D100628FCFC549D9405610EA90EC3F60ADAB26BFCE99920948D57BED2E7947CC0FA93E5823C2DA7E098FFA60CCD44157D20E140D62A47EB624982833A4338A965CA95D915819D641185B6BC19B79CB081425FBB90A0F84428575432DEEB919CECF4300754FFDB2A639D084B4E0744550280BE9A79F4B2B70CC4DC3BE2CDE5AB63EBC7E16A91EC605C9F5493BC13C93EF7B1F3362E4507FF567828F62519A2D534065E5432245EA2F2C5EB176E8F5C40E77BD2CBB81C14DA624B228E278BA79FDEDDD3E571C6B667D460ACACD01BC8E1C2F6EDE7B692D6903E6C05CB04CDC35C51C109B2D370FD1FFB584672778A3D60A491AA6C8FD5C8D7079A4B5DA300E453C1175EF72A9D59DFDF4E7F25E7503AF60D621BEED3D81034E509928C7E28DFAA89C1547587F7DBE8E0FB0C6E65C3DA38E975A054E0680F9801D29608125C22EE1EDF86FA1AC7AE937B815AFF2223857BCF924BD50E5450488AACCB5940E941AD392AD097BABF9DA0A747FAED42E274C8238910FB9FE789D0D54DDA0B646E8AA2CC1CC521FAD4708AE6E82D6A55261D1E762C30D1269A8681B5FE006C7BCF41618421EF3FDFCF5135CFE35950CD9AFC4F6A7B2C33693EB36C873C1A51E5D0E80AF88EE19F094B00FE406BAF494B33689224B0574E710C8688C850574654A49945D0CF1E908BA218855531039F99BD047CC03
BCD198D18F42BD749682F74A6F5C2F79241B8974A9036A199F912494799C7AE988B8BE65D1A3049AD8018ACE665CAB488B87722B01D472C41CD014FB66474E3192FEB0AE25B08356D0CFD8AFE1D4F3CE78B57AAE52F0376FD4CDFA3B555F6024DAF9B407ED8AC721D062A845A9713A5B4F62B97889705FC38E90FBD052A7CBCEE961803F34A86D7987E98AB177C6EDBEE2408BBA15737E9286A28948D18CB3C17390CEB0431FFFF697A6759D90E51378E5F4DAC840AAF001E8309D3494EAD8B4A363C6223E5DACB29C270722920EB0F3452F6B6ACB67C60B5B8A1ADBF18EC8F2359A6BB86D9529C827356937FE4B5382002ABE44604A3F4589077F317FAFABFB7244BE489038BA95CD3C33B9470464C7C185A1A52528F77E096368A6EBDD968745A2A43F1EA6BD67DA0B0DB524A22B3711B2C3CC1AD7C7804FB41410CAF892A152B7B4A338FB57ECE7077C2B2B9EE3DB02FF3F6A947ECF09F043A58A046529E10A1E4EDF9D835FFA7CA25CC211661013CC203F6D51F681C248A3FDE5DF8465861DCAB2833A132FE2731BD67B3B347CA32A06CA1E01624E62CA47235A0CFB090043447AD8FF154A4A584AE6C4356BAEFE453ABC5A9C4B84ECA6ABF913959B75ED0ED32300A91F67A941102E6E79E3FE32D1885BB71219BDE71E128BA33388936D0FDD5AEB9BB84397716F032969826E97FCF9158CC8524A0074082BA7B2897F33DD11BEFF3C903167A3131864BF90917069242723BC3C33C2DFE909CE14A638DFE9A0AA4C65F169D2564BE0AF0123B42693FA947C3406908854D6C54088782DB70371B52A049D1B4E681CB98851160D8BCFD79D9AA1E1ED1BA2E9E9E28463C7CD3462EF171A3A93D2BB90793C3BA00997C6CBBBC8EA121C674E34D1EF7DF9676FA90A85EFFB4CB6C4BD04123B7C6C102FDE30A3A9E800CA02D7B05C2F177C1F3FD61DBB5D2FC96DFB1E589F415655567C123CC478568C6B17D13B6D31ECCB5824F0D9925CFC2840B323520E38ECB542C79EF6EB190C6DDF11F7FA86C6CCDC66A7BA270EEBC80C80B11EB820BA2674E11584B7F43314D04FA801677BA0025EE3F9845CB1705DF0CBF9652347FC0DED144CF33751E45EFFF4D46428CBC0974A867C685FAACBD31B7144B50AB2DA64C5B7E3002B44D5D2A667E78AF154BD71E86569E05D982BF439FB7FFBD03D128C2D01BCA9A7AAE16919F4A3BCC85DBD25F602700DE7B7252EB05D1C459BC32C488B3E1E282CC5E81F419FD13A714CD853ACBBC4E97EE4020336E2C7AEA69625429E9A111539E4DC66DEC0F39154B16074EA78902E1379FE5DD67EE0DA379BCA075FBDB4A44B009012A423E97B9AC401A89FEE22B1DB0EDE5334D331DDA4714743E18C05ADF3F1DA4D51BB9B5E8D78E89517195D766856C5231496E35F2AF5140AD515B29EAC40389F99B435E2EA3C1D0C0FCA03



0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/HWCRWQ+RobotoCondensed-Regular cguidfix
/F1.1/HWCRWQ+RobotoCondensed-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
0 0 0 sc
0.60000002 i
q
0 0 490 508 rc
1 0 0 -1 86 326 cm
/F1.1[ 20 0 0 -20 0 0]sf
9.4560547 19 m
(!"#"$%&%#'\(\)"*%)[ 11.083984 9.580078 6.083984 9.580078 15.048828 9.365234 5.908203 9.365234 6.083984 4.580078 10.361328 9.863281 9.580078 9.238281 0.000000 ] xS
1 0 0 -1 17 512 cm
31.389648 19 m
(\(+,&-%./0%#)[ 10.361328 8.330078 9.677734 5.908203 9.658203 9.365234 9.111328 4.580078 8.779297 9.365234 0.000000 ] xS
1 0 0 -1 259 268 cm
0 19 m
(12&3$"&/*)[ 11.523438 9.667969 5.908203 10.039062 15.048828 9.580078 5.908203 4.580078 0.000000 ] xS
0 43 m
(\(+,&-%./0%#)[ 10.361328 8.330078 9.677734 5.908203 9.658203 9.365234 9.111328 4.580078 8.779297 9.365234 0.000000 ] xS
0 67 m
(!#34#"$$/,4')[ 11.083984 6.083984 10.039062 9.853516 6.083984 9.580078 15.048828 15.048828 4.580078 9.677734 9.853516 0.000000 ] xS
0 91 m
(\(+.&%$)[ 10.361328 8.330078 9.111328 5.908203 9.365234 0.000000 ] xS
1 0 0 -1 81 137 cm
3.2714844 19 m
(!%#*%\)&2"56\(%$",&/*')[ 11.083984 9.365234 6.083984 9.238281 9.365234 9.863281 5.908203 9.667969 9.580078 4.580078 4.960938 10.361328 9.365234 15.048828 9.580078 9.677734 5.908203 4.580078 9.238281 0.000000 ] xS
60.795898 43 m
(\(\)"*%)[ 10.361328 9.863281 9.580078 9.238281 0.000000 ] xS
1 0 0 -1 385 248 cm
16.871094 19 m
(73,*%\)&2"5)[ 11.337891 10.039062 9.677734 9.238281 9.365234 9.863281 5.908203 9.667969 9.580078 0.000000 ] xS
27.061523 43 m
(8/.&",*%)[ 11.416016 4.580078 9.111328 5.908203 9.580078 9.677734 9.238281 0.000000 ] xS
2 w
2 J
[
5
5
] 0 d
1 0 0 -1 48 143 cm
0.99290788 2 m
360 2 l
S
1 0 0 -1 53 301 cm
0 1 m
356 1 l
S
1 0 0 -1 59 409 cm
0 1.5 m
346 1.5 l
S
Q
6 w
q
48 329 367 158 rc
1 0 0 -1 48 487 cm
0 0 m
367 0 l
367 158 l
0 158 l
0 0 l
h
S
Q
q
0 0 490 508 rc
1 0 0 -1 284 475 cm
/F1.1[ 20 0 0 -20 0 0]sf
0.15039062 19 m
(\(9:;<=\(>\()[ 10.361328 10.488281 12.382812 10.410156 12.402344 9.931641 10.361328 5.000000 0.000000 ] xS
15.277344 43 m
(=:?>:=)[ 9.931641 12.382812 11.816406 5.000000 12.382812 0.000000 ] xS
1 0 0 -1 285 390 cm
6.3642578 19 m
(7@:;A@B)[ 11.337891 12.011719 12.382812 10.410156 10.615234 12.011719 0.000000 ] xS
0.12890625 43 m
(>:;=AC17=)[ 5.000000 12.382812 10.410156 9.931641 10.615234 9.609375 11.523438 11.337891 0.000000 ] xS
Q
q
84 338 167 62 rc
1 0 0 -1 84 400 cm
0 0 m
167 0 l
167 62 l
0 62 l
0 0 l
h
S
Q
q
238.4117 375.17648 m
237.35287 375.17648 l
237.35287 388.94116 l
237.35287 389.52594 236.87883 390 236.29405 390 c
235.70929 390 235.23523 389.52594 235.23523 388.94116 c
235.23523 375.17648 l
234.17641 375.17648 l
232.42212 375.17648 231 373.75433 231 372.00006 c
231 370.24579 232.42212 368.82367 234.17641 368.82367 c
235.23523 368.82367 l
235.23523 355.05884 l
235.23523 354.47406 235.70929 354 236.29405 354 c
236.87883 354 237.35287 354.47406 237.35287 355.05884 c
237.35287 368.82352 l
238.4117 368.82352 l
238.4117 368.82367 l
240.16599 368.82367 241.5881 370.24579 241.5881 372.00006 c
241.5881 373.75433 240.16599 375.17648 238.4117 375.17648 c
h
238.4117 370.94116 m
234.17641 370.94116 l
233.7981 370.94116 233.44853 371.14301 233.25938 371.47061 c
233.07024 371.79825 233.07024 372.20187 233.25938 372.52951 c
233.44853 372.85712 233.7981 373.05896 234.17641 373.05896 c
238.4117 373.05884 l
238.99648 373.05884 239.47052 372.58478 239.47052 372 c
239.47052 371.41522 238.99648 370.94116 238.4117 370.94116 c
h
W
0 0 490 508 rc
226 395 m
246.5881 395 l
246.5881 349 l
226 349 l
h
f
Q
q
220.4117 375.17648 m
219.35287 375.17648 l
219.35287 388.94116 l
219.35287 389.52594 218.87883 390 218.29405 390 c
217.70929 390 217.23523 389.52594 217.23523 388.94116 c
217.23523 375.17648 l
216.17641 375.17648 l
214.42212 375.17648 213 373.75433 213 372.00006 c
213 370.24579 214.42212 368.82367 216.17641 368.82367 c
217.23523 368.82367 l
217.23523 355.05884 l
217.23523 354.47406 217.70929 354 218.29405 354 c
218.87883 354 219.35287 354.47406 219.35287 355.05884 c
219.35287 368.82352 l
220.4117 368.82352 l
220.4117 368.82367 l
222.16599 368.82367 223.5881 370.24579 223.5881 372.00006 c
223.5881 373.75433 222.16599 375.17648 220.4117 375.17648 c
h
220.4117 370.94116 m
216.17641 370.94116 l
215.7981 370.94116 215.44853 371.14301 215.25938 371.47061 c
215.07024 371.79825 215.07024 372.20187 215.25938 372.52951 c
215.44853 372.85712 215.7981 373.05896 216.17641 373.05896 c
220.4117 373.05884 l
220.99648 373.05884 221.47052 372.58478 221.47052 372 c
221.47052 371.41522 220.99648 370.94116 220.4117 370.94116 c
h
W
0 0 490 508 rc
208 395 m
228.5881 395 l
228.5881 349 l
208 349 l
h
f
Q
q
193.18784 382.20795 m
192.29106 380.50186 192.20842 378.48309 192.96274 376.70938 c
193.71706 374.9357 195.22847 373.59485 197.07942 373.05728 c
196.77765 372.20157 196.41916 371.36691 196.00632 370.5589 c
195.59552 369.74982 195.13025 368.96957 194.61371 368.22354 c
191.95876 370.19656 188.24234 369.84515 186.00427 367.40945 c
183.7662 364.97375 183.72975 361.24094 185.91985 358.76202 c
188.10992 356.28308 191.81877 355.85916 194.51173 357.77997 c
197.20471 359.70078 198.01152 363.34552 196.3808 366.22342 c
197.84506 368.22241 198.97728 370.44452 199.73381 372.80411 c
202.81433 373.16452 205.21078 375.65161 205.45671 378.74338 c
205.70262 381.83511 203.72945 384.66977 200.74466 385.51263 c
197.75986 386.3555 194.59544 384.97168 193.18784 382.20795 c
h
194.19165 361.27057 m
193.47556 359.86505 191.98331 359.02933 190.41075 359.15308 c
188.8382 359.27682 187.49503 360.33566 187.00758 361.83588 c
186.52013 363.33609 186.98439 364.98221 188.18388 366.00665 c
189.38336 367.0311 191.08185 367.23209 192.48734 366.51593 c
192.65321 366.42532 192.81223 366.32266 192.96304 366.20871 c
192.66318 365.90302 192.34682 365.61395 192.01535 365.34286 c
191.60776 365.00638 191.16833 364.71042 190.70329 364.45923 c
190.55167 364.37939 190.43858 364.32874 190.37137 364.30066 c
190.30588 364.27454 l
190.30083 364.27264 l
190.30174 364.2699 l
189.62418 364.04199 189.25826 363.3093 189.48312 362.63074 c
189.70799 361.95215 190.43904 361.58298 191.11861 361.80481 c
192.3784 362.31216 193.51877 363.07623 194.46716 364.04834 c
194.7233 363.1203 194.62511 362.13019 194.19165 361.27057 c
h
202.45412 377.48654 m
202.01338 376.63058 201.27007 375.96912 200.36871 375.63077 c
200.59772 376.96951 200.54552 378.34128 200.21542 379.65872 c
199.99484 380.33807 199.26697 380.7117 198.58641 380.49487 c
197.90585 380.27808 197.52821 379.55225 197.74126 378.87051 c
197.73828 378.86954 l
197.74573 378.84189 l
197.95592 377.76376 197.95258 376.65488 197.73586 375.57806 c
197.55537 375.63309 197.37918 375.70129 197.20866 375.78207 c
195.28949 376.75989 194.52638 379.10837 195.5042 381.02753 c
196.48201 382.94672 198.83049 383.70981 200.74965 382.73199 c
202.66882 381.75418 203.43193 379.40573 202.45412 377.48654 c
h
W
0 0 490 508 rc
175.27501 358.06665 m
193.95337 394.72498 l
214.4473 384.28281 l
195.76894 347.62448 l
h
f
Q
q
110.50008 388 m
105.25338 388.00003 101.00005 383.7468 101 378.50009 c
100.99995 373.25339 105.25321 369.00003 110.49992 369 c
115.74662 368.99997 119.99995 373.2532 120 378.49991 c
119.99974 383.74649 115.74666 387.99963 110.50008 388 c
h
115.29816 373.70184 m
113.24537 371.64969 110.11462 371.13049 107.50929 372.41016 c
104.90395 373.68979 103.40105 376.48483 103.77026 379.36389 c
104.13946 382.24295 106.29901 384.56833 109.14293 385.14917 c
109.14293 378.49991 l
109.14293 377.7504 109.75055 377.14276 110.50008 377.14276 c
111.24962 377.14276 111.85724 377.7504 111.85724 378.49991 c
111.85724 385.14917 l
114.30457 384.64957 116.27959 382.84589 116.99862 380.4538 c
117.71764 378.06171 117.06443 375.46802 115.29816 373.70184 c
h
W
0 0 490 508 rc
96 393 m
125 393 l
125 364 l
96 364 l
h
f
Q
q
112.7 360 m
108.3 360 l
106.4775 359.99991 105.00009 358.48892 105 356.625 c
105 354.375 l
105.00014 352.51111 106.47754 351.00021 108.3 351.00012 c
112.7 351 l
112.7 351.00012 l
114.52242 351.00027 115.99973 352.51117 115.99987 354.375 c
116 356.625 l
115.99982 358.48889 114.52246 359.99982 112.7 360 c
h
114 354.24997 m
113.99857 353.56027 113.47708 353.00153 112.83336 353 c
108.16679 353 l
107.52301 353.00146 107.00146 353.56021 107 354.24997 c
107.00014 356.74988 l
107.00142 357.43967 107.52297 357.99854 108.16679 358 c
112.83336 357.99985 l
113.47712 357.99841 113.99866 357.43964 114 356.74988 c
114 354.24997 l
h
W
0 0 490 508 rc
100 365 m
121 365 l
121 346 l
100 346 l
h
f
Q
q
168.6646 387.03851 m
163.94891 389.33856 158.26154 387.38028 155.96149 382.66461 c
153.66145 377.94891 155.61972 372.26154 160.3354 369.96149 c
165.05109 367.66144 170.73846 369.61972 173.03851 374.33539 c
175.33823 379.05112 173.38004 384.73825 168.6646 387.03851 c
h
166.70918 372.08405 m
163.96454 371.1395 160.92305 372.04529 159.14235 374.33752 c
157.36165 376.62976 157.23611 379.80078 158.83005 382.22659 c
160.42398 384.6524 163.38435 385.79578 166.19508 385.07114 c
163.28023 379.09482 l
162.95166 378.42114 163.23141 377.60867 163.90511 377.28009 c
164.57878 376.95151 165.39127 377.23126 165.71983 377.90497 c
168.63469 383.88126 l
170.61531 382.35938 171.59976 379.87244 171.1974 377.40726 c
170.79504 374.94205 169.07094 372.89722 166.70918 372.08405 c
h
W
0 0 490 508 rc
157.82387 397.88889 m
183.8889 385.17612 l
171.17613 359.11111 l
145.1111 371.82388 l
h
f
Q
q
166.7 360 m
162.3 360 l
160.47749 359.99991 159.00009 358.48892 159 356.625 c
159 354.375 l
159.00015 352.51111 160.47754 351.00021 162.3 351.00012 c
166.7 351 l
166.7 351.00012 l
168.52242 351.00027 169.99974 352.51117 169.99986 354.375 c
170 356.625 l
169.99982 358.48889 168.52246 359.99982 166.7 360 c
h
168 354.24997 m
167.99857 353.56027 167.47708 353.00153 166.83336 353 c
162.16678 353 l
161.52301 353.00146 161.00145 353.56021 161 354.24997 c
161.00014 356.74988 l
161.00142 357.43967 161.52296 357.99854 162.16678 358 c
166.83336 357.99985 l
167.47713 357.99841 167.99866 357.43964 168 356.74988 c
168 354.24997 l
h
W
0 0 490 508 rc
154 365 m
175 365 l
175 346 l
154 346 l
h
f
Q
q
132.05109 386.28198 m
127.75321 383.27264 126.70866 377.34897 129.718 373.05109 c
132.72736 368.7532 138.65103 367.70865 142.94891 370.71802 c
147.24678 373.72736 148.29134 379.65103 145.282 383.94891 c
142.27246 388.24649 136.34904 389.29102 132.05109 386.28198 c
h
144.18254 377.32169 m
143.67804 374.46323 141.41129 372.24222 138.54315 371.79608 c
135.67502 371.34995 132.84073 372.7775 131.49181 375.34763 c
130.14288 377.91779 130.57809 381.06131 132.57454 383.1683 c
136.3884 377.72156 l
136.81831 377.10757 137.66457 376.95834 138.27855 377.38828 c
138.89253 377.81818 139.04175 378.66443 138.61183 379.27841 c
134.79797 384.72516 l
137.08928 385.71964 139.74167 385.37497 141.70271 383.82791 c
143.66374 382.28085 144.61635 379.78152 144.18254 377.32169 c
h
W
0 0 490 508 rc
117.30544 382.06085 m
141.06085 398.69455 l
157.69456 374.93915 l
133.93915 358.30545 l
h
f
Q
q
139.7 360 m
135.3 360 l
133.47749 359.99991 132.00009 358.48892 132 356.625 c
132 354.375 l
132.00015 352.51111 133.47754 351.00021 135.3 351.00012 c
139.7 351 l
139.7 351.00012 l
141.52242 351.00027 142.99974 352.51117 142.99986 354.375 c
143 356.625 l
142.99982 358.48889 141.52246 359.99982 139.7 360 c
h
141 354.24997 m
140.99857 353.56027 140.47708 353.00153 139.83336 353 c
135.16678 353 l
134.52301 353.00146 134.00145 353.56021 134 354.24997 c
134.00014 356.74988 l
134.00142 357.43967 134.52296 357.99854 135.16678 358 c
139.83336 357.99985 l
140.47713 357.99841 140.99866 357.43964 141 356.74988 c
141 354.24997 l
h
W
0 0 490 508 rc
127 365 m
148 365 l
148 346 l
127 346 l
h
f
Q
q
83 415 167 60 rc
1 0 0 -1 83 475 cm
0 0 m
167 0 l
167 60 l
0 60 l
0 0 l
h
S
Q
2 w
q
0 0 490 508 rc
1 0 0 -1 102 463 cm
0 17.419348 m
1.9650426 5.8064489 6.5335269 0 13.705452 0 c
20.877378 0 25.510675 5.8064489 27.605343 17.419348 c
29.402592 28.473116 33.98996 34 41.367443 34 c
48.74493 34 53.289112 28.473116 55 17.419348 c
S
1 0 0 -1 168 463 cm
0 17.419348 m
1.9650426 5.8064489 6.5335269 0 13.705452 0 c
20.877378 0 25.510675 5.8064489 27.605343 17.419348 c
29.402592 28.473116 33.98996 34 41.367443 34 c
48.74493 34 53.289112 28.473116 55 17.419348 c
S
2 J
[
3
3
] 0 d
1 0 0 -1 1 473 cm
46 0.12291209 m
15.333333 -1.9307411 0 21.75041 0 71.166367 c
0 113.85999 0 355.48352 0 382.0621 c
0 414.7121 13.194014 431.02472 39.582039 430.99997 c
S
Q
0.06666667 0.06666667 0.06666667 sc
q
65.446808 56 m
54.428253 47.518425 l
44 47.518425 l
44 36.603909 l
54.270241 36.603909 l
65.446808 28 l
65.446808 56 l
h
W
0 0 490 508 rc
39 61 m
70.446808 61 l
70.446808 23 l
39 23 l
h
f
Q
4.5 w
1 j
q
0 0 490 508 rc
1 0 0 -1 44 56 cm
21.446808 0 m
10.428253 8.4815741 l
0 8.4815741 l
0 19.396091 l
10.270239 19.396091 l
21.446808 28 l
21.446808 0 l
h
S
1 J
0 j
1 0 0 -1 71.702126 56 cm
0 7.835391 m
2.7520635 11.578048 2.7520635 16.421951 0 20.16461 c
4.5826802 3.7448559 m
9.618288 9.8428402 9.618288 18.15716 4.5826802 24.255144 c
8.7780924 0 m
16.137798 8.1773663 16.137798 19.822634 8.7780924 28 c
S
2 w
2 J
0 0 0 sc
1 0 0 -1 393 290 cm
1.5 0 m
1.5 140 l
S
1.5 0 m
1.5 140 l
4.5 0 m
-1.5 0 l
4.5 140 m
-1.5 140 l
S
Q
4 w
0 j
0 0 0 sc
q
134.5 46.131149 m
109.5 46.131149 l
163 84 l
216.5 46.131149 l
194.5 46.131149 l
194.5 0 l
134.5 0 l
134.5 46.131149 l
h
W*
0 0 490 508 rc
0 1 1 0 109.5 0 cm
46.131149 25 m
46.131149 0 l
84 53.5 l
46.131149 107 l
46.131149 85 l
0 85 l
0 25 l
46.131149 25 l
h
S
Q
q
0 0 490 508 rc
1 0 0 -1 143.5 51 cm
/F1.1[ 20 0 0 -20 0 0]sf
0.43066406 19 m
(D\(=A)[ 11.230469 10.361328 9.931641 0.000000 ] xS
Q
6 w
q
74 293 m
378 293 l
378 148 l
74 148 l
74 293 l
h
W*
0 0 490 508 rc
1 0 0 -1 74 293 cm
0 0 m
304 0 l
304 145 l
0 145 l
0 0 l
h
S
Q
4 w
q
127 245 m
97 245 l
161.5 286 l
226 245 l
199 245 l
199 195 l
127 195 l
127 245 l
h
W*
0 0 490 508 rc
0 1 1 0 97 195 cm
50 30 m
50 0 l
91 64.5 l
50 129 l
50 102 l
0 102 l
0 30 l
50 30 l
h
S
Q
1 1 1 sc
q
88 158 152 58 rc
88 216 m
240 216 l
240 158 l
88 158 l
88 216 l
h
f
6 w
0 0 0 sc
1 0 0 -1 88 216 cm
0 0 m
152 0 l
152 58 l
0 58 l
0 0 l
h
S
Q
0 0 0 sc
q
0 0 490 508 rc
1 0 0 -1 121 209 cm
/F1.1[ 20 0 0 -20 0 0]sf
5.2167969 19 m
(>:;D>;>E=)[ 5.000000 12.382812 10.410156 11.230469 5.000000 10.410156 5.000000 11.201172 0.000000 ] xS
0.12890625 43 m
(>:;=AC17=)[ 5.000000 12.382812 10.410156 9.931641 10.615234 9.609375 11.523438 11.337891 0.000000 ] xS
1 0 0 -1 126 268 cm
16.168945 19 m
(F"\).')[ 15.107422 9.580078 9.863281 9.111328 0.000000 ] xS
30.026367 43 m
(&3)[ 5.908203 0.000000 ] xS
ep
end
